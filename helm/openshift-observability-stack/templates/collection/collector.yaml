{{- if .Values.collection.enabled }}
apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  name: telemetry
  namespace: openshift-observability
spec:
  replicas: {{ .Values.collection.replicas }}
  # this OTEL collector instance must be stateless
  config:
    extensions:
      bearertokenauth:
        filename: /var/run/secrets/kubernetes.io/serviceaccount/token

    receivers:
      otlp:
        protocols:
          grpc: {}
          http: {}
      jaeger:
        protocols:
          thrift_compact: {}

    connectors:
      spanmetrics:
        dimensions:
        - name: k8s.namespace.name

    processors:
      k8sattributes: {}

    # https://docs.openshift.com/container-platform/4.17/observability/otel/otel-forwarding-telemetry-data.html#otel-forwarding-logs-to-tempostack_otel-forwarding-telemetry-data
      k8sattributes/logs:
        extract:
          metadata:
          - k8s.pod.name
          - k8s.container.name
          - k8s.namespace.name
          labels:
          - tag_name: app.label.component
            key: app.kubernetes.io/component
            from: pod
        pod_association:
        - sources:
          - from: resource_attribute
            name: k8s.pod.name
          - from: resource_attribute
            name: k8s.container.name
          - from: resource_attribute
            name: k8s.namespace.name
        - sources:
          - from: connection

      transform/logs:
        log_statements:
        - context: log
          statements:
          - set(attributes["level"], ConvertCase(severity_text, "lower"))

      resource/logs:
        attributes:
        - key: loki.format
          action: insert
          value: json
        - key:  kubernetes_namespace_name
          from_attribute: k8s.namespace.name
          action: upsert
        - key:  kubernetes_pod_name
          from_attribute: k8s.pod.name
          action: upsert
        - key: kubernetes_container_name
          from_attribute: k8s.container.name
          action: upsert
        - key: log_type
          value: application
          action: upsert
        - key: loki.resource.labels
          value: log_type, kubernetes_namespace_name, kubernetes_pod_name, kubernetes_container_name
          action: insert

    exporters:
      otlphttp/prometheus:
        endpoint: http://openshift-monitoring-prometheus.openshift-observability:9090/api/v1/otlp

      # doesn't print any error but also doesn't ingest logs (?) when using otlphttp/loki
      #otlphttp/loki:
      #  endpoint: https://logging-loki-gateway-http.openshift-logging.svc.cluster.local:8080/api/logs/v1/application/otlp
      #  tls:
      #    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt
      #  auth:
      #    authenticator: bearertokenauth
      loki:
        endpoint: https://logging-loki-gateway-http.openshift-logging.svc.cluster.local:8080/api/logs/v1/application/loki/api/v1/push
        tls:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt
        auth:
          authenticator: bearertokenauth

      otlp/tempo:
        endpoint: tempo-openshift-tracing-gateway.openshift-observability.svc:8090
        tls:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt
        auth:
          authenticator: bearertokenauth
        headers:
          X-Scope-OrgID: application

      debug:
        verbosity: detailed

    service:
      extensions: [bearertokenauth]
      pipelines:
        metrics:
          receivers: [otlp]
          processors: [k8sattributes]
          exporters: [otlphttp/prometheus]

        logs:
          receivers: [otlp]
          processors: [k8sattributes/logs, transform/logs, resource/logs]
          exporters: [loki]

        traces:
          receivers: [otlp, jaeger]
          processors: [k8sattributes]
          exporters: [spanmetrics, otlp/tempo]

        metrics/spanmetrics:
          receivers: [spanmetrics]
          processors: []
          exporters: [otlphttp/prometheus]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: openshift-observability-telemetry-collector-k8sattributes
roleRef:
  kind: ClusterRole
  name: openshift-observability-k8sattributes-processor
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: telemetry-collector
  namespace: openshift-observability
---
# write logs and traces to 'application' tenant
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: openshift-observability-telemetry-collector2
rules:
- apiGroups: [loki.grafana.com]
  resourceNames: [logs]
  verbs: [create]
  resources: [application]
- apiGroups: [tempo.grafana.com]
  resourceNames: [traces]
  verbs: [create]
  resources: [application]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: openshift-observability-telemetry-collector2
roleRef:
  kind: ClusterRole
  name: openshift-observability-telemetry-collector2
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: telemetry-collector
  namespace: openshift-observability
{{- end }}
